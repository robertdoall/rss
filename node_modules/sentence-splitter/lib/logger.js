"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.debugLog = exports.nodeLog = exports.seekLog = void 0;
function seekLog(offset, current) {
    if (process.env.DEBUG !== "sentence-splitter") {
        return;
    }
    console.log("sentence-splitter: " + offset, current);
}
exports.seekLog = seekLog;
function nodeLog(message, sourceCode) {
    if (process.env.DEBUG !== "sentence-splitter") {
        return;
    }
    if (!sourceCode) {
        console.log("sentence-splitter: " + message);
        return;
    }
    var currentNode = sourceCode.readNode();
    if (!currentNode) {
        console.log("sentence-splitter: " + message);
        return;
    }
    var RowLength = 50;
    var currentChar = (sourceCode.read() || "").replace(/\n/g, "\\n");
    var nodeValue = currentNode.raw.replace(/\n/g, "\\n");
    console.log("sentence-splitter: " + sourceCode.offset + " " + message + " |" + currentChar + "| " + " ".repeat(RowLength - currentChar.length - message.length) + nodeValue);
}
exports.nodeLog = nodeLog;
function debugLog() {
    var message = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        message[_i] = arguments[_i];
    }
    if (process.env.DEBUG !== "sentence-splitter") {
        return;
    }
    console.log.apply(console, __spreadArray(["sentence-splitter: "], message.map(function (m) {
        // make one line if it is multiline
        return typeof m === "string" ? m.replace(/\n/g, "\\n") : m;
    })));
}
exports.debugLog = debugLog;
//# sourceMappingURL=logger.js.map